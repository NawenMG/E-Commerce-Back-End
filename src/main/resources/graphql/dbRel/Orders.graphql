# Definizione del tipo Orders
type Orders {
    orderID: Int!
    usersID: Int!
    statoDiSpedizione: String!
    dataDiConsegna: String!
    dataDiRichiesta: String!
    accettazioneOrdine: Boolean!
    status: Boolean!
    corriere: String!
    posizione: String!
}

# Input per i parametri di ricerca per Orders
input OrdersFilter {
    orderID: Int
    usersID: Int
    statoDiSpedizione: String
    dataDiConsegna: String
    dataDiRichiesta: String
    accettazioneOrdine: Boolean
    status: Boolean
    corriere: String
    posizione: String
}

# Tipo di output per il risultato delle query Orders
type QueryResultOrders {
    items: [Orders]!
    totalCount: Int
}

# Input per i parametri di query
input ParamQueryInput {
    distinct: Boolean
    condizioneWhere: String
    valoriWhere: String
    boleani: String
    orderBy: Boolean
    top: Int
    min: Boolean
    max: Boolean
    count: Boolean
    avg: Boolean
    sum: Boolean
    all: Boolean
    like: String
    in: String
    between: [String]
    having: String
    limit: Int
    offset: Int
}

# Query universale
type Query {
    getOrders(params: ParamQueryInput, filter: OrdersFilter): QueryResultOrders
}
